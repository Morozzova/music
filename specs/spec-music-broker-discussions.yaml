openapi: 3.0.4
info:
  title: Music broker
  description: App for discussions about music, searching tracks and asking other users for titles
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
tags:
  - name: discussion
    description: Discussion with searching music tracks

paths:
  /discussion/create:
    post:
      tags:
        - discussion
      summary: Create discussion
      operationId: discussionCreate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscussionCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscussionCreateResponse'
  /discussion/read:
    post:
      tags:
        - discussion
      summary: Read discussion
      operationId: discussionRead
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscussionReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscussionReadResponse'
  /discussion/update:
    post:
      tags:
        - discussion
      summary: Update discussion description
      operationId: discussionUpdate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscussionUpdateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscussionUpdateResponse'
  /discussion/delete:
    post:
      tags:
        - discussion
      summary: Delete discussion
      operationId: discussionDelete
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscussionDeleteRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscussionDeleteResponse'
  /discussion/close:
    post:
      tags:
        - discussion
      summary: Close discussion
      operationId: discussionClose
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscussionCloseRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscussionCloseResponse'
  /discussion/allDiscussions:
    post:
      tags:
        - discussion
      summary: Show all discussions
      operationId: allDiscussions
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllDiscussionsRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllDiscussionsResponse'
  /discussion/usersDiscussions:
    post:
      tags:
        - discussion
      summary: Show users discussions
      operationId: usersDiscussions
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersDiscussionsRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersDiscussionsResponse'

components:
  schemas:

    IRequest:
      type: object
      description: Базовый интерфейс для всех запросов
      properties:
        requestType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
      discriminator:
        propertyName: requestType
        mapping:
          create: '#/components/schemas/DiscussionCreateRequest'
          read: '#/components/schemas/DiscussionReadRequest'
          update: '#/components/schemas/DiscussionUpdateRequest'
          delete: '#/components/schemas/DiscussionDeleteRequest'
          close: '#/components/schemas/DiscussionCloseRequest'
          readAll: '#/components/schemas/AllDiscussionsRequest'
          readUsers: '#/components/schemas/UsersDiscussionsRequest'

    IResponse:
      type: object
      description: Базовый интерфейс для всех ответов
      properties:
        responseType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
        result:
          $ref: '#/components/schemas/ResponseResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      discriminator:
        propertyName: responseType
        mapping:
          create: '#/components/schemas/DiscussionCreateResponse'
          read: '#/components/schemas/DiscussionReadResponse'
          update: '#/components/schemas/DiscussionUpdateResponse'
          delete: '#/components/schemas/DiscussionDeleteResponse'
          close: '#/components/schemas/DiscussionCloseResponse'
          readAll: '#/components/schemas/AllDiscussionsResponse'
          readUsers: '#/components/schemas/UsersDiscussionsResponse'

    DiscussionInitResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'

    DiscussionCreateObject:
      allOf:
        - $ref: '#/components/schemas/BaseDiscussion'

    DiscussionCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DiscussionRequestDebug'
        - type: object
          properties:
            discussion:
              $ref: '#/components/schemas/DiscussionCreateObject'

    DiscussionReadObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/DiscussionId'

    DiscussionReadRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DiscussionRequestDebug'
        - type: object
          properties:
            discussion:
              $ref: '#/components/schemas/DiscussionReadObject'

    DiscussionUpdateObject:
      allOf:
        - $ref: '#/components/schemas/BaseDiscussion'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/DiscussionId'
            lock:
              $ref: '#/components/schemas/DiscussionLock'

    DiscussionUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DiscussionRequestDebug'
        - type: object
          properties:
            discussion:
              $ref: '#/components/schemas/DiscussionUpdateObject'

    DiscussionDeleteObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/DiscussionId'
            lock:
              $ref: '#/components/schemas/DiscussionLock'

    DiscussionDeleteRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DiscussionRequestDebug'
        - type: object
          properties:
            discussion:
              $ref: '#/components/schemas/DiscussionDeleteObject'

    DiscussionCloseObject:
      allOf:
        - $ref: '#/components/schemas/BaseDiscussion'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/DiscussionId'
            lock:
              $ref: '#/components/schemas/DiscussionLock'

    DiscussionCloseRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DiscussionRequestDebug'
        - type: object
          properties:
            discussion:
              $ref: '#/components/schemas/DiscussionCloseObject'

    AllDiscussionsReadObject:
      allOf:
        - type: object
          properties:
            allDiscussions:
              $ref: '#/components/schemas/DiscussionResponseMulti'

    AllDiscussionsRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DiscussionRequestDebug'
        - type: object

    UsersDiscussionsReadObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/UserId'

    UsersDiscussionsRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DiscussionRequestDebug'
        - type: object
          properties:
            usersId:
              $ref: '#/components/schemas/UserId'

    DiscussionResponseObject:
      allOf:
        - $ref: '#/components/schemas/BaseDiscussion'
        - type: object
          description: Объект, который возвращается в ответе бэкенда
          properties:
            id:
              $ref: '#/components/schemas/DiscussionId'
            ownerId:
              $ref: '#/components/schemas/UserId'
            lock:
              $ref: '#/components/schemas/DiscussionLock'
            permissions:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/DiscussionPermissions'

    DiscussionPermissions:
      type: string
      description: Доступы для клиента для операций над обсуждениями
      enum:
        - read
        - update
        - delete
    DiscussionResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним обсуждением
          properties:
            discussion:
              $ref: '#/components/schemas/DiscussionResponseObject'
    DiscussionResponseMulti:
      allOf:
        - type: object
          description: Список найденных объектов
          properties:
            discussions:
              type: array
              items:
                $ref: '#/components/schemas/DiscussionResponseObject'
    DiscussionCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DiscussionResponseSingle'

    DiscussionReadResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DiscussionResponseSingle'

    DiscussionUpdateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DiscussionResponseSingle'

    DiscussionDeleteResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DiscussionResponseSingle'

    DiscussionCloseResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DiscussionResponseSingle'

    AllDiscussionsResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DiscussionResponseMulti'

    UsersDiscussionsResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DiscussionResponseMulti'

    Error:
      type: object
      properties:
        code:
          type: string
        group:
          type: string
        field:
          type: string
        message:
          type: string

    ResponseResult:
      type: string
      enum:
        - success
        - error

    UserId:
      type: string
      description: Идентификатор пользователя
    DiscussionId:
      type: string
      description: Идентификатор обсуждения
    AnswerId:
      type: string
      description: Идентификатор ответа
    DiscussionLock:
      type: string
      description: Версия оптимистичной блокировки

    BaseDiscussion:
      type: object
      description: Объект описывает свойства, одинаковые для create и update
      properties:
        title:
          type: string
          description: Текст обсуждения
        soundUrl:
          type: string
          description: Ссылка на аудиозапись
        answers:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/DiscussionStatus'

    DiscussionStatus:
      type: string
      description: 'Возможность добавления новых ответов'
      enum:
        - none
        - open
        - closed

    BaseAnswer:
      type: object
      description: Свойства ответа
      properties:
        text:
          type: string
          description: Текст ответа
        isRight:
          type: string
          enum:
            - none
            - true
            - false
          description: Верен ли ответ

    BaseUser:
      type: object
      description: Свойства пользователя
      properties:
        login:
          type: string
          description: Логин
        password:
          type: string
          description: Пароль
        name:
          type: string
          description: Отображаемое имя

    # STUBS ======================
    DiscussionRequestDebugMode:
      type: string
      enum:
        - prod
        - test
        - stub

    DiscussionRequestDebug:
      type: object
      properties:
        debug:
          $ref: '#/components/schemas/DiscussionDebug'

    DiscussionDebug:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/DiscussionRequestDebugMode'
        stub:
          $ref: '#/components/schemas/DiscussionRequestDebugStubs'

    DiscussionRequestDebugStubs:
      type: string
      description: Перечисления всех стабов
      enum:
        - success
        - notFound
        - badId
        - badTitle
        - badFile
        - cannotDelete
